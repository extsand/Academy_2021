// https://www.jenkins.io/doc/pipeline/tour/environment/
// jenkins snipets
pipeline {
    agent any
		// agent {
		// 	label: python
		// }


		// check git repo every minute
    // triggers {
		// 	// every 1 minute
		// 	// pollSCM('H/2 * * * *')
		// 	// pollSCM( '* * * * *')
		// }

    environment {
        PROJECT = "terra.weather"
        DESCRIPTIONS = "GitHub -> Jenkins -> Docker ->->-> AWS"
        OWNER = "extsand"
        GIT_REPO = "https://github.com/extsand/terra.weather.git"  
				GIT_REPO_SSH = "git@github.com:extsand/terra.weather.git"
				GIT_BRANCH = "dep_to_aws"
				DOCKER_HUB_IMAGE_NAME = "extsand/terra.weather_docker:latest"

				ENV_FILE = ".env"

				DEPLOY_INSTANCE = "AWS-APP_3.69.201.48"
				WORK_DIR = "/home/ubuntu/docker_workplace"
		
    } 

		options {
        buildDiscarder(logRotator(
					numToKeepStr: '3', 
					artifactNumToKeepStr: '3'
					))
        timestamps()
    }

    stages {

        stage('Introducting') {
            steps {
                echo "Hello User!\n It is ${PROJECT} project.\n We will use pipeline ${DESCRIPTIONS}.\n You can see files in ${GIT_REPO}."
            }
        }

				stage('Clone Git Repository'){
					steps {
						echo '======== Clone app from git Repository ============='
						echo "Get app files from ${GIT_REPO}"
						git branch: "${GIT_BRANCH}", 
						credentialsId: 'extsand_git_credentials', 
						url: "${GIT_REPO_SSH}"

					}
				}
				
				stage('DockerHub login'){
					steps{
						echo '============ Log in Docker Hub ===================='
						withCredentials(
							[usernamePassword(
									credentialsId: 'dockerhub_extsand', 
									passwordVariable: 'dockerhub_password', 
									usernameVariable: 'dockerhub_username')]) {
								// Login to dockerhub
								sh 'docker login -u $dockerhub_username -p $dockerhub_password '
						}
					}
				}

				stage('Create docker image'){
					steps {
						echo '=========== Start docker to build docker image ============'
						dir ('./'){
							sh 'docker build -t $DOCKER_HUB_IMAGE_NAME . '
						}
					}
				}

				

				stage('Publish docker image'){
					steps {
						echo '=========== Push Docker image to DockerHub ============'
						sh 'docker push $DOCKER_HUB_IMAGE_NAME'
					}
				}
				
				stage('Upload docker to Global server'){
					steps {
						echo '=========== Set Docker image in local server ============'
						sshPublisher(
							publishers: [
								sshPublisherDesc(
									configName: "${DEPLOY_INSTANCE}", 
									transfers: [
										sshTransfer(
											cleanRemote: false, 
											excludes: '', 
											execCommand: "cd ${WORK_DIR}; \
																		docker-compose down; \
																		docker rmi -f ${DOCKER_HUB_IMAGE_NAME}; \
																		docker-compose build; 	\
																		docker-compose up -d",
											execTimeout: 1200000, 
											flatten: false, 
											makeEmptyDirs: false, 
											noDefaultExcludes: false, 
											patternSeparator: '[, ]+', 
											remoteDirectory: '', 
											remoteDirectorySDF: false, 
											removePrefix: '', 
											// Get secrets from Git To jenkins
											sourceFiles: "docker-compose.yaml, ${ENV_FILE}"

											
										)
									], 
									usePromotionTimestamp: false, 
									useWorkspaceInPromotion: false, 
									verbose: true
								)
							]
						)
					}
				}
    




    }
}